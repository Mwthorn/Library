import java.util.Random;

public class CatAndMouseWithLake {
	//Creating global private variables so that all the methods could access
	private static int paramB, paramL, catXPos, catYPos, mouseXPos, mouseYPos, lakeX, lakeY;
	private static boolean caught = false, altRoute = false;

	public static void runCatAndMouse(int n, int catX, int catY, int mouseX, int mouseY, int m, int lakeLLX, int lakeLLY) {
		// Assigning global variables the initial values
		paramB = n;
		paramL = m;
		catXPos = catX;
		catYPos = catY;
		mouseXPos = mouseX;
		mouseYPos = mouseY;
		lakeX = lakeLLX;
		lakeY = lakeLLY;
		int moveNum = 1;

		//Outputting the starting positions
		System.out.println(n + " [" + catX + ";" + catY + "]" + " [" + mouseX + ";" + mouseY + "]");

		// Check for invalid arguments or starting positions (negative board size, cat on mouse, etc)
		if (catX >= n || catY >= n || mouseX >= n || mouseY >= n || catX < 0 || catY < 0 || mouseX < 0 || mouseY < 0
				|| n <= 0 || (catX == mouseX && catY == mouseY))
			System.out.println("ERROR");
		// Checks for lake position, lake size, if cat&mouse are inside the lake, etc
		else if (((catX >= lakeLLX && catX <= lakeLLX + (m - 1)) && (catY >= lakeLLY && catY <= lakeLLY + (m - 1))) || 
				((mouseX >= lakeLLX && mouseX <= lakeLLX + (m - 1)) && (mouseY >= lakeLLY && mouseY <= lakeLLY + (m - 1))) || m <= 0 ||
				m >= n - 1 || lakeLLX == 0 || lakeLLY == 0 || lakeLLX + (m - 1) >= n-1 || lakeLLY + (m - 1) >= n-1) {
			System.out.println("ERROR");
		}
		else {
			// We will keep on running the game as long as the mouse is not caught
			while (caught == false) {
				//Cat moves first and then the cat moves
				mouseMove();
				catMove();
				//Prints the new positions and move #
				System.out.println("Move " + moveNum + " [" + catXPos + ";" + catYPos + "]" + " [" + mouseXPos + ";"
						+ mouseYPos + "]");
				moveNum++;
			}
		}
	}

	public static void mouseMove() {
		// Using Random instead of Math.random for whole value integers between
		// paramBeters
		Random dice = new Random();
		boolean valid = false;

		//It will keep on looping until it randomly chooses an OK path to go
		while (valid == false) {
			int direction = dice.nextInt(5);
			
			//Direction 1 is to the right
			if (direction == 1 && mouseXPos + 1 != paramB) {
				//The mouse will NOT move on to the cat and it will report a 'valid' destination
				if ((mouseXPos + 1 != catXPos || mouseYPos != catYPos) && !checkIfLake(mouseXPos + 1, mouseYPos)) {
					mouseXPos++;
					valid = true;
				}
			//Direction 2 is down
			} else if (direction == 2 && mouseYPos - 1 != -1) {
				if ((mouseYPos - 1 != catYPos || mouseXPos != catXPos) && !checkIfLake(mouseXPos, mouseYPos - 1)) {
					mouseYPos--;
					valid = true;
				}
			//Direction 3 is left
			} else if (direction == 3 && mouseXPos - 1 != -1) {
				if ((mouseXPos - 1 != catXPos || mouseYPos != catYPos) && !checkIfLake(mouseXPos - 1, mouseYPos)) {
					mouseXPos--;
					valid = true;
				}
			//Direction 4 is up
			} else if (direction == 4 && mouseYPos + 1 != paramB) {
				if ((mouseYPos + 1 != catYPos || mouseXPos != catXPos) && !checkIfLake(mouseXPos, mouseYPos + 1)) {
					mouseYPos++;
					valid = true;
				}
			//and direction 0 is staying in the same position
			} else if (direction == 0)
				valid = true;
		}
	}

	public static void catMove() {
		int moves = 0;
		//The cat will move as long as it hasnt moved twice in a turn or caught the mouse yet
		while (moves < 2 && caught == false) {
			//The cat will go right until it hits a lake is the cat's X is less than the mouses
			if(catXPos < mouseXPos && altRoute == false) {
				if (checkIfLake(catXPos + 1, catYPos) == false)
					catXPos++;
				else
					catYPos++;
			//Likewise it will go left if it is greater
			} else if (catXPos > mouseXPos && altRoute == false) {
				if (checkIfLake(catXPos - 1, catYPos) == false)
					catXPos--;
				else
					catYPos--;
			} else if (catYPos > mouseYPos && altRoute == false) {
				if (checkIfLake(catXPos, catYPos - 1) == false)
					catYPos--;
				else {
					altRoute = true;
					catXPos++;
				}
			} else if (catYPos < mouseYPos && altRoute == false) {
				if (checkIfLake(catXPos, catYPos + 1) == false)
					catYPos++;
				else {
					altRoute = true;
					catXPos++;
				}
			//If it encounters a lake then it will take these alternate set of instructions
			} else {
				if (checkIfLake(catXPos, catYPos + 1))
					catXPos++;
				else if (catYPos < mouseYPos) {
					catYPos++;
					altRoute = false;
				}
				else if (checkIfLake(catXPos, catYPos - 1))
					catXPos++;
				else {
					catYPos--;
					altRoute = false;
				}
			}
			moves++;

			//If the cat's X and Y are the same as the mouse's then it will be 'caught'
			if (catXPos == mouseXPos && catYPos == mouseYPos)
				caught = true;
		}
	}
	
	//A method to check if there is a lake at the destination that is fed in
	public static boolean checkIfLake(int checkX, int checkY) {
		boolean lakeThere = false;
		
		//If the X is within the bounds as well as the Y then it will return true
		if ((checkX >= lakeX && checkX <= lakeX + (paramL - 1)) && (checkY >= lakeY && checkY <= lakeY + (paramL - 1)))
			lakeThere = true;
		
		return lakeThere;
	}
}
